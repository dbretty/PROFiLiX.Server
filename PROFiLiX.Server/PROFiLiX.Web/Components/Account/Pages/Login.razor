@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using PROFiLiX.Web.Data;
@using PROFiLiX.Web.Shared.Models

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Logon</PageTitle>

<MudText Typo="Typo.h5" Align="Align.Left" Class="px-4">
    Logon
</MudText>

<MudPaper Class="pa-2 ma-2" Elevation="25">

    <MudGrid Spacing="12" Justify="Justify.FlexStart">
        <MudItem md="12">
            
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <MudGrid>

                    <MudItem md="12" xs="12" >
                        <MudText Typo="Typo.body2">User Name</MudText>
                        <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                            Placeholder="name@example.com"
                                            UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                    </MudItem>

                    <MudItem md="12" xs="12">
                        <MudText Typo="Typo.body2">Password</MudText>
                        <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                            InputType="InputType.Password" Placeholder="password"
                                            UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                    </MudItem>

                    <MudItem md="12" xs="12">
                        <MudStaticButton Variant="Variant.Filled" Color="Color.Info" FullWidth="true" FormAction="FormAction.Submit">Logon</MudStaticButton>
                    </MudItem>

                </MudGrid>
            </EditForm>

        </MudItem>
    </MudGrid>

</MudPaper>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } = false;
    }
}
